Q1: The Code will throw ValueError, and np.any() should be used to get the required output.

Q2: [16 81 33 5 6 1]

Q3: 
import numpy as np
def filter_marks(marks):
    '''
    INPUT: marks -> 1D array    
    OUTPUT: filtered_marks -> 1D array
    '''    
    ### Step 1 Get the mask for marks > 40    
    mask = marks > 40    
    ### STEP 2 use the mask to filter the array    
    filtered_array = marks[mask]    
    return filtered_array

Q4:56

------Additional Que--------
Q1 :
import numpy as np
def check_conditions(arr, k):
    '''
    INPUT: arr, k
    
    OUTPUT: result -> bool
    '''
    
    result = None    
    ## STEP 1 : Create mask for the given condition    
    mask = np.all(arr % 2 == 0) & np.all(arr > k)     
    ## STEP 2: Use logical function on mask    
    result = mask    
    return result

or

import numpy as np

def check_conditions(arr, k):
    '''
    INPUT: arr, k
    
    OUTPUT: result -> bool
    '''
    
    result = None    
    ## STEP 1 : Create mask for the given condition    
    mask = (arr % 2 == 0) & (arr > k)     
    ## STEP 2: Use logical function on mask    
    result = np.all(mask)    
    return result

Q2:
import numpy as np

def extract_subarray(arr):
    '''
    INPUT: arr -> 2D array
    OUTPUT: result -> 2D array
    '''
    arr = np.array(arr)  # Convert to numpy array if it's a list
    # STEP 1: Get rows from index 1 to 3 (2nd to 4th row)
    row_array = arr[1:4]
    # STEP 2: Get the last 3 columns
    cols_array = row_array[:, -3:]
    # STEP 3: Reverse the rows
    result = cols_array[::-1,;]

    return result



Q3:
[[ 6 8 7 28 56 19]]

Q4:
import numpy as np
def reverse_column(arr):
    '''
    INPUT: arr -> 2D array 
    
    OUTPUT rev_arr -> 2D array
    '''    
    rev_arr = arr[:,::-1]    
    return rev_arr

Q5:
import numpy as np
def rotate_img(mat):
    '''mat -> A 2d numpy array
       output -> A 2d numpy array is expected to be returned'''    
    # Step 1: Transpose the matrix
    transposed = mat.T    
    # Step 2: Reverse each row (i.e., reverse along columns)
    rotated = transposed[:, ::-1]    
    return rotated


Q6:
For 'a', the answer is 1.0
For 'b', the answer is 21