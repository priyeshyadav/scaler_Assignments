Q1:
print(word_list[7:19])

Q2:
extend, append, sort

Q3:
def solve(A,B):
    ans = [0]*2
    for x in A:
        if x <= B:
            ans[1] = x
        if x >= B:
            ans[0] = x
            break
    return ans

Q4:
// Took help from companion to define C 
def addMatrices(A, B):
    C = [[0 for j in range(len(A[0]))] for i in range(len(A))]
    for i in range(len(A)):
        for j in range(len(A[0])):
            C[i][j] = A[i][j]+B[i][j]
    return C

//First we define C matrix & required rows & columns with 0 elements
def addMatrices(A, B):
    C = []
    for i in range(len(A)):
        C.append([0]*len(A[0]))
    
    for i in range(len(A)):
        for j in range(len(A[0])):
            C[i][j] = A[i][j]+B[i][j]
    return C


Q5:
def largest(A):
    largest = []
    for i in range(len(A)):
        element = A[i][0]
        for j in range(len(A[0])):
            if A[i][j] > element:
                element = A[i][j]
        largest.append(element)
    
    return largest

---------------------------
AQ1:
[1, 4, 3]

AQ2:
[1, 3, 4]

AQ3:
def invert(A):
    n = len(A)
    lst = [0] * n  
    for i in range(n):
        lst[A[i]] = i  
    return lst

AQ4:
def transpose(A):
    rows, cols = len(A), len(A[0])
    B = [[0] * rows for _ in range(cols)]  # took help from companion
    
    for i in range(rows):
        for j in range(cols):
            B[j][i] = A[i][j]  
    
    return B

AQ5:
def invert(A):
    n = len(A)
    lst = [0] * n  
    for i in range(n):
        lst[A[i]] = i  
    return lst

AQ6:
def product(lst):
    product = 1
    for element in lst:
        if element == 0:
            product = 0
            return product
        else:
            product = product * element
   
    return product

